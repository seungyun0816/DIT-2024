Python

개발 가능 한 부분
  -소프트웨어
  -웹
  -DB
  -AI
  -프로토타입(빠르게 작성 및 확인 가능)

인터프리터 언어 : 컴파일 필요 없이 한 줄씩 바로 실행되는 언어.
---------------------
Python의 장점

  -다양한 플랫폼에서 실행 가능
  -간결한 문장
  -다른 언어에 비해 생산성이 높은 문장 구조
  -인터프리터 언어 방식은 컴파일 방식보다 빠르게 결과 확인 가능
  -절차적,객체지향적,함수적 개발 모두 가능
---------------------
Python 기본 문법

  문자열
    -"",'' 두가지 사용 가능
    -한 가지를 사용 할 경우 안에 포함되는 나머지는 문자열로 취급됨
     예)print("안녕'바보'야") >>> [안녕'바보'야]

  연산자
    -+,-,*,/,//(소수점 제거 나누기),%,**(지수) 등

    -문자열과 *연산자를 사용하면 문자열을 곱한 만큼 출력
     예)print("바보" * 5) >>> [바보바보바보바보바보]

    -문자열과 문자열을 +연산자로 더하면 문자열 같이 출력됨
     예)print('바보' + "멍청이") >>> [바보멍청이]

  변수 : 메모리 공간에 이름을 붙이고 값을 저장하는 것
    -변수 선언은 a = b라는 간단한 방식으로 가능
     예)a = 45 >>> print(a) >>> [45]

    -변수의 값이 바뀔 때 자료형이 바뀌어도 상관없음
     예)a = 123 >>> print(a) >>> [123] >>> a = '바보' >>> print(a) >>> [바보]

    -변수명 작명 규칙은 영문자(대,소문자 구분),숫자,_만 사용
     공백이 포함되면 안 됨
     숫자로 시작하면 안 됨

  대입 연산
    -a,b = 425,32등의 형식으로 한 번에 여러 변수에 값을 대입 할 수 있음
    -함수에서 return 할 때 여러 값을 한 번에 받아와서 여러 변수에 동시에 저장 가능

  서식 지정자
    -문자열 안에 서식 지정자를 사용해서 원하는 위치에 원하는 형식을 지정 해 놓을 수 있음
    -서식 지정자 사용 시 변수 참조 전 위치에 %를 넣어야 한다
     예)print("a = %10d, b = %.3f"%(a,b))
    -%d | 정수 서식 지정
    -%s | 실수 서식 지정
     예)a,b = 100,3.141592 >>> print("a = %10d, b = %.3f"%(a,b)) >>> a =        100, b = 3.142
       출력값 [a =        100, b = 3.142]에서 %d를 이용해 정수 자리 10자리를 비우고, %.3f를 이용해 소수점 3자리 까지만 표기함(4자리에서 반올림)

  print에서 {}사용
    -print 함수에서 {}를 이용해 데이터들의 위치를 지정 할 수 있다.
    -{} 사용 시 값 지정 전 위치에 .format을 넣어야 한다
     예)print("내몫  = {1}, 니몫 = {0}".format(6000,4000))

  매개변수
    -굉장히 많은 매개면수가 있으니 쓰면 유용하다
    -end,sep등
     예)print("뒷 맛이 안 좋아", end="<<>>") >>> 뒷 맛이 안 좋아<<>>
        print("중간","중간","찔리는게","있어", sep="W") >>> 중간W중간W찔리는게W있어

  입출력
    -input()함수로 값을 입력 받을 수 있다
     예)n = input() >>> '바보'입력 >>> print(n) >>> 바보

  자료형 변환
    -숫자를 가지고있는 문자열 변수를 숫자형태로 바꿀 수 있다
    -int(),float()를 값에 포함하는 형식으로 작성한다
     예)n = 24 <<<이건 문자열로 저장됨
        int(n)으로 사용하면 숫자로 사용 가능
---------------------
